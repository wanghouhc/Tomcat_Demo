1.tomcate禁用AJP服务的压力测试
这个方法是禁用tomcate的与前端的长链接

2.配置执行器（线程池）
tomcate中用户的每一次请求都是一个线程，所以可以使用线程池来提高性能

3.tomcate运行模式

3.1 bio 默认
3.2 nio
3.3 apr

4.Apcahe JMeter 压力测试工具
性能三个要素：
平均响应时间
吞吐率
错误率

5.调整tomcate参数进行优化 平衡三要素 不断对参数进行设置调整，以期达到最优
1.禁用AJP服务
2.设置线程池 调整线程池的大小和初始值
  1.线程的数量
  2.线程池的初始大小
  3.设置最大等待数
3.设置nio2的运行模式

6.调整JVM参数进行优化
1.设置垃圾回收器类型
  1.设置并行垃圾回收器
    在tomcat中设置垃圾回收器类型
    就是在tomcate直接对jvm参数进行设置 catalinn.sh

7.JVM字节码之javap的使用  通过查看字节码，对程序进行优化
常量池
字段描述符
方法描述符

代码优化：
  1.尽可能使用局部变量
  调用方法时传递的参数以及调用中创建的临时变量都保存在栈中，速度较快。其他变量
  ，如静态变量，实例变量等都在堆中创建，速度较慢，另外，栈中创建的变量，随着方法的运行结束
  这些内容就没了，不需要额外的垃圾回收
  2.尽量减少对变量的重复计算
  明确一个概念，对方法的调用，即方法中只有一句语句，也是有消耗的
  3.尽量使用懒加载的策略，即在需要的时候才创建
  4.异常不应该用来控制程序流程
  不能使用异常来作为判断的条件，来作为条件的判断
  5.不要将数组声明为public static final
  6.不要创建一些不使用的对象，不导入一些不使用的类
  7.程序运行过程中避免使用反射
    如确实需要使用，建议使将那些需要通过反射加载的类在项目启动的时候通过反射实例化出
    一个对象并放入内存
  8.使用数据库连接池和线程池
  9.容器初始化时尽可能指定长度
  如 ArrayList<>(10)
  10.ArrayList随机便利快，LinkedList添加删除快
  11.使用Entry便利Map
  Map.entrySet()
  12.不要手动调用System.gc();
  13.String尽量少用正则表达式
  正则虽然功能强大，但是效率低，除非有需要，否则尽可能少使用
  replace（）不支持正则
  replaceAll()支持正则
  14.日志输出要注意级别
  //当前的日志级别是error
  Logger.info("---"); //不会执行，日志级别太低

  15.对资源的close（）建议分开操作
  避免相互影响，而造成一些close，因为异常而没有执行
